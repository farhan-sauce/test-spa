{"version":3,"sources":["App.module.css","Components/Login.js","context.js","ReadLang.js","ChangeLang.js","Components/About.js","Components/Contact.js","Components/MultipleURLChange.js","Components/MultipleURLChange2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","urlParams","URLSearchParams","window","location","search","delayTime","get","isMultipleRedirect","isAutoRedirectRedirect","history","useHistory","setTimeout","push","redirectToPage","useEffect","console","info","repo","version","author","timer","setInterval","fetch","clearInterval","id","onClick","to","log","delay","Math","ceil","then","catch","err","error","finally","Promise","all","map","u","timeout","parseInt","open","document","getElementById","click","close","warn","LanguageContext","React","createContext","language","setLanguage","ReadLang","useContext","ChangeLang","About","Contact","IMAGES","Array","keys","MultipleURLChange1","handleMultipleRequest","currentCounter","urls","i","item","key","style","src","alt","MultipleURLChange2","length","App","useState","value","Provider","className","styles","path","MultipleURLChange","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c0546fa4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-container\":\"App_app-container__2OIHZ\"};","import React, { useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst Login = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 3000;\n  const isMultipleRedirect = urlParams.get('multipleRedirect');\n  const isAutoRedirectRedirect = urlParams.get('autoRedirect');\n\n  const history = useHistory();\n\n  if (isAutoRedirectRedirect) {\n    setTimeout(() => {\n      history.push(\"/about\")\n    }, delayTime)\n  }\n\n  const redirectToPage = () => {\n    history.push(\"/about\")\n    if (isMultipleRedirect) {\n      setTimeout(() => {\n        history.push(\"/contact\")\n      }, 2000)\n    }\n  }\n\n  const handleLogin = () => {\n    setTimeout(() => {\n      redirectToPage()\n    }, delayTime)\n  }\n\n  const handleSingleRequest = () => {\n    console.log(\"Hello World\")\n    const delay = Math.ceil(delayTime / 1000);\n    fetch(`https://reqres.in/api/users?delay=${delay}`)\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        redirectToPage()\n      })\n  }\n\n  const handleMultipleRequest = () => {\n    const urls = [\n      'https://reqres.in/api/users/1',\n      'https://reqres.in/api/users/2',\n      'https://reqres.in/api/users/3'\n    ];\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        const timeout = urlParams.get('delayTime') ? parseInt(urlParams.get('delayTime'), 10) : 0\n        setTimeout(() => {\n          console.log('---timeout', timeout)\n          redirectToPage()\n        }, timeout)\n      })\n  }\n\n  const handleWrongRequests = () => {\n    console.warn('Deprecated API')\n    const urls = [\n      'https://reqres.in/api/users/23',\n      'https://reqres.in/api/unknown/23'\n    ];\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => {\n        console.error('Custom Error: Request failed')\n      })\n  }\n\n  useEffect(() => {\n    console.info('Track Events: login page')\n    console.info(\n      'Track Events: login page multiple args',\n      123456,\n      true,\n      ['foo'],\n      ['foo1', ['bar1'], 5],\n      { repo: 'test-spa', version: '1.0.0', info: { author: 'sl' }\n    })\n    const timer = setInterval(() => {\n      fetch('https://reqres.in/api/users');\n    }, 5000)\n    return () => {\n      clearInterval(timer);\n    }\n  }, []);\n\n  const handleMultipleURLRequest = () => {\n    const delay = Math.ceil(delayTime / 1000);\n    fetch(`https://reqres.in/api/users?delay=${delay}`)\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        history.push(\"/about\")\n        // setTimeout(() => {\n        //   history.push(\"/contact\")\n        // }, 2000)\n        setTimeout(() => {\n          history.push(\"/multiple-2\")\n        }, 2000)\n        // setTimeout(() => {\n        //   history.push(\"/multiple-2\")\n        // }, 8000)\n      })\n  }\n\n  const handleNewWindow = () => {\n    window.open('#', 'newwindow', 'width=500,height=500')\n  }\n\n  const handleCloseWindow = () => {\n    fetch(`https://reqres.in/api/users?delay=${3000}`)\n    var multiReq = document.getElementById('multiple-request')\n    multiReq.click();\n    var singleReq = document.getElementById('single-request')\n    singleReq.click();\n    window.close()\n  }\n\n  return (\n    <section id=\"login-section\">\n      <p>SPA Login test</p>\n      <div>\n        <button id=\"login\" onClick={handleLogin}>\n          Login\n        </button>\n      </div>\n      <div>\n        <Link to=\"/about\" id=\"about-link\">About</Link>\n      </div>\n      <div>\n        <button id=\"single-request\" onClick={handleSingleRequest}>\n          Single request\n        </button>\n      </div>\n      <div>\n        <button id=\"multiple-request\" onClick={handleMultipleRequest}>\n          Multiple requests\n        </button>\n      </div>\n      <div>\n        <button id=\"multiple-url-link\" onClick={handleMultipleURLRequest}>\n          Multiple URL Changes\n        </button>\n      </div>\n      <div>\n        <button id=\"new-window\" onClick={handleNewWindow}>\n          New Window\n        </button>\n      </div>\n      <div>\n        <button id=\"close-window\" onClick={handleCloseWindow}>\n          Close Window\n        </button>\n      </div>\n      <div>\n        <button id=\"failed-requests\" onClick={handleWrongRequests}>\n          Failed Requests\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from 'react'\n\nconst LanguageContext = React.createContext({\n  language: \"en\",\n  setLanguage: () => {}\n});\n\nexport default LanguageContext;\n","import React, { useContext } from 'react'\nimport LanguageContext from './context'\n\nconst ReadLang = () => {\n  const { language } = useContext(LanguageContext);\n\n  return (\n    <div>\n      <h1>\n        {`Current language is ${language}`}\n      </h1>\n    </div>\n  );\n};\n\nexport default ReadLang;\n","import React, { useContext } from 'react'\nimport LanguageContext from './context'\n\nconst ChangeLang = () => {\n  const { language, setLanguage } = useContext(LanguageContext);\n\n  return (\n    <div>\n      <p>{`selected language is ${language}`}</p>\n      <button onClick={() => setLanguage(\"de\")}>\n        Set de language\n      </button>\n      <button onClick={() => setLanguage(\"en\")}>\n        Set en language\n      </button>\n      <button onClick={() => setLanguage(\"es\")}>\n        Set es language\n      </button>\n    </div>\n  );\n};\n\nexport default ChangeLang;\n","import React from 'react'\nimport ReadLang from '../ReadLang';\nimport ChangeLang from '../ChangeLang';\n\nconst About = () => {\n  return (\n    <div>\n      <h4 id=\"about\">\n        User is LoggedIn\n      </h4>\n      <ChangeLang />\n      <ReadLang />\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <h4 id=\"contact\">\n      Contact page\n    </h4>\n  );\n};\n\nexport default Contact;\n","import React, { useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst MAX_COUNTER = 5\nconst IMAGES = [...Array(50).keys()];\n\nconst MultipleURLChange1 = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 2000;\n\n  const history = useHistory();\n\n  const handleMultipleRequest = ((currentCounter) => {\n    const urls = []\n    for (let i = currentCounter; i <= currentCounter + 10; i ++) {\n      const delay = Math.ceil(delayTime / 1000);\n      urls.push(`https://reqres.in/api/users/${i}?delay=${delay}`)\n    }\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        if (currentCounter < MAX_COUNTER) {\n          handleMultipleRequest(currentCounter + 1)\n        }\n      })\n  })\n\n  const updateURLs = () => {\n    history.push({ search: '?color=pink' })\n    setTimeout(() => {\n      history.push(\"/multiple-2\")\n    }, 7000)\n    // setTimeout(() => {\n    //   history.push({ search: '?color=white' })\n    // }, 2000)\n  }\n\n  useEffect(() => {\n    updateURLs()\n    setTimeout(() => {\n      handleMultipleRequest(1)\n    }, 5000)\n  }, []) // eslint-disable-line\n\n  return (\n    <section id=\"login-section\">\n      <h3>\n        Multiple URL Change-1\n      </h3>\n      <div>\n        <Link to=\"/multiple-2\" id=\"multiple-2\">Multiple URL - 2</Link>\n      </div>\n      <div>\n        <p>Random Images</p>\n        {IMAGES.map((item) => item === 0 ? null : (\n          <div key={item} style={{ 'width': 200, 'height': 200 }}>\n            <img src={`https://dummyimage.com/${item*10}/09f/fff.png`} alt=\"check\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default MultipleURLChange1;\n","import React, { useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst MAX_COUNTER = 5\nconst IMAGES = [...Array(50).keys()];\n\nconst MultipleURLChange2 = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const delayTime = urlParams.get('delayTime') || 4000;\n\n  const history = useHistory();\n\n  const handleMultipleRequest = ((currentCounter) => {\n    const urls = []\n    for (let i = 0; i <=  5; i ++) {\n      // const delay = Math.ceil(delayTime / 1000);\n      urls.push(`https://reqres.in/api/users/${i}?delay=15`)\n    }\n    Promise.all(urls.map(u=>fetch(u)))\n      .then(() => console.log('done'))\n      .catch((err) => console.error(err))\n      .finally(() => {\n        if (currentCounter < MAX_COUNTER) {\n          setTimeout(() => {\n            handleMultipleRequest(currentCounter + 1)\n          }, 6000)\n        }\n      })\n  })\n\n  const updateURLs = () => {\n    history.push({ search: '?color=pink' })\n    setTimeout(() => {\n      history.push({ search: '?color=green' })\n    }, 500)\n    setTimeout(() => {\n      history.push({ search: '?color=white' })\n    }, 2000)\n  }\n\n  useEffect(() => {\n    updateURLs()\n    setTimeout(() => {\n      handleMultipleRequest(1)\n    }, 5000)\n  }, []) // eslint-disable-line\n\n  return (\n    <section id=\"login-section\">\n      <h3>\n        Multiple URL Change-2\n      </h3>\n      <div>\n        <Link to=\"/multiple-1\" id=\"multiple-1\">Multiple URL - 1</Link>\n      </div>\n      <div>\n        <span>\n          {IMAGES.length}\n        </span>\n        <p> - Random Images</p>\n        {IMAGES.map((item) => item === 0 ? null : (\n          <div key={item} style={{ 'width': 200, 'height': 200 }}>\n            <img src={`https://dummyimage.com/${item*10}/09f/fff.png`} alt=\"check\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default MultipleURLChange2;\n","import React, { useState } from \"react\";\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Login from \"./Components/Login\";\nimport About from \"./Components/About\";\nimport styles from './App.module.css';\nimport Contact from \"./Components/Contact\";\nimport MultipleURLChange from \"./Components/MultipleURLChange\";\nimport MultipleURLChange2 from \"./Components/MultipleURLChange2\";\nimport ThemeContext from './context'\n\nexport default function App() {\n  const [language, setLanguage] = useState(\"en\");\n  const value = { language, setLanguage };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <Router>\n        <div className={styles['app-container']}>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/multiple-1\">\n              <MultipleURLChange />\n            </Route>\n            <Route path=\"/multiple-2\">\n              <MultipleURLChange2 />\n            </Route>\n            <Route path=\"/\">\n              <Login />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ThemeContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}